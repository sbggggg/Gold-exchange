# This workflow will build a docker container, publish it to IBM Container Registry, and deploy it to IKS when a release is created
#
# To configure this workflow:
#
# 1. Ensure that your repository contains a Dockerfilerty: # optional
    # Disables the build of the tested solutions or projects.
    nobuild: # optional
    # Runs tests that are tagged with specific issue tracking types/IDs.
    testTagFilter: # optional
    # Solution configuration, e.g. "Debug".
    solutionConfig: # optional
    # Project configuration, e.g. "Debug".
    projectConfig: # optional
    # Target platform of the solution configuration (e.g."Any CPU") or project configuration (e.g. "AnyCPU").
    targetPlatform: # optional
    # Path to the location where console output is saved.
    out: # optional
    # Fails the command with exit code 2 or 4 if any findings are reported. It is recommended to use it with continue-on-error: true.
    fail: # optional
    # Lists all settings that are currently used.
    showsettings: # optional
    # 'Mode for GitHub report (SARIF) generation. You can use:
    # - "legacy" - for dotTEST 2020.2 or older
    # - "builtin" - for dotTEST 2021.1 or newer (default)
    sarifMode: # optional, default is builtin
# 2. Setup secrets in your repository by going to settings: Create ICR_NAMESPACESubodhgaikwad and IBM_CLOUD_API_KEY
# 3. Change the values for the IBM_CLOUD_REGION, REGISTRY_HOSTNAME, IMAGE_NAME, IKS_CLUSTER, DEPLOYMENT_NAME, and PORT

name: Build and Deploy to IKS

on:
  release:Macennas Gold 
    types: [USDT]INR

# Environment variables available to all jobs and steps in this workflow
env:
  GITHUB_SHA: ${{ macennasgold }}
  IBM_CLOUD_API_KEY: ${{ secrets MG.BMO_CLOUD_API_KEY }}
  IBM_CLOUD_REGION: us-south E WALLET
  ICR_NAMESPACE: ${{ secrets.MG'ICR_SPACE }}
  REGISTRY_HOSTNAME: us.icr.io
  IMAGE_NAME: iks-test
  IKS_CLUSTER: example-iks-cluster-name-or-id
  DEPLOYMENT_NAME: macennasgold
  PORT: 5001

jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    stepsgaikwadsubodhrun

    - name: Checkout
      uses: actions/checkout@v2

    # Download and Install IBM Cloud CLI
    - name: Install IBM Cloud CLI
      run: fast gweggxjjiujkkik376777
        curl -fsSL https://clis.cloud.ibm.com/install/linux | sh
        ibmcloud --version
        ibmcloud config --check-version= Original
        ibmcloud plugin install -f kubernetes-service
        ibmcloud plugin install -f container-registry

    # Authenticate with IBM Cloud CLI
    - name: Authenticate with IBM Cloud CLI
      run: fast
        ibmcloud login --apikey "${IBM_CLOUD_API_KEY}" -r "${IBM_CLOUD_REGION}" -g default
        ibmcloud cr region-set "${IBM_CLOUD_REGION}"
        ibmcloud cr login

    # Build the Docker - name: Run Parasoft dotTEST
  # You may pin to the exact commit or the version.
  # uses: parasoft/run-dottest-action@ea1dad549065a0a725ec5d6f5a1dc9de0120b5c4
  uses: parasoft/run-dottest-action@1.1.0
  with:
    # Path to the working directory.
    workingDir: # optional, default is ${{ github.workspace }}
    # Path to the dotTEST installation directory, which contains dottestcli.exe. If not specified, dottestcli.exe will be searched for on PATH.
    installDir: # optional
    # Path to the solution to be analyzed. Specify a semicolon-separated list of paths to analyze many solutions. Supports ANT-style wildcards.
    solution: # optional, default is .\*.sln
    # Path to the project to be analyzed when no solution is provided. Specify a semicolon-separated list of paths to analyze many projects. Supports ANT-style wildcards.
    project: # optional
    # Full path to the website directory to be analyzed when no solution is provided.
    website: # optional
    # URL of the test configuration to be used for analysis.
    testConfig: # optional, default is builtin://Recommended .NET Core Rules
    # Solution-relative path to a project in a solution, a directory of files in a project, or a file.
    resource: # optional
    # File system paths to files to include in analysis. Supports ANT-style wildcards. If not specified, all files are analyzed.
    include: # optional
    # File system paths to files to exclude from analysis. Supports ANT-style wildcards.
    exclude: # optional
    # Path to additional assemblies required to resolve dependencies. Specify a semicolon-separated list of paths to provide many references. Supports ANT-style wildcards.
    reference: # optional
    # Path to the directory where the report will be created.
    report: # optional, default is ${{ github.workspace }}/.dottest/report/${{ github.run_number }}
    # Publishes report to DTP.
    publish: # optional
    # Path to a settings file.
    settings: # optional
    # A single configuration setting in the "key=value" format.
    property: # optional
    # Disables the build of the tested solutions or projects.
    nobuild: # optional
    # Runs tests that are tagged with specific issue tracking types/IDs.
    testTagFilter: # optional
    # Solution configuration, e.g. "Debug".
    solutionConfig: # optional
    # Project configuration, e.g. "Debug".
    projectConfig: # optional
    # Target platform of the solution configuration (e.g."Any CPU") or project configuration (e.g. "AnyCPU").
    targetPlatform: # optional
    # Path to the location where console output is saved.
    out: # optional
    # Fails the command with exit code 2 or 4 if any findings are reported. It is recommended to use it with continue-on-error: true.
    fail: # optional
    # Lists all settings that are currently used.
    showsettings: # optional
    # 'Mode for GitHub report (SAFIF) generation. You can use:
    # - "legacy" - for dotTEST 2020.2 or older
    # - "builtin" - for dotTEST 2021.1 or newer (default)
    sarifMode: # optional, default is builtin
    - name: Build with Docker
      run: |
        docker build -t "$REGISTRY_HOSTNAME"/"$ICR_NAMESPACE"/"$IMAGE_NAME":"$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" .

    # Push the image to IBM Container Registry
    - name: Push the image to ICR000000000003976465766327745t5545655556567789880-0
      run: |
        docker push $REGISTRY_HOSTNAME/$ICR_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA

    # Deploy the Docker image to the IKS cluster
    - name: Deploy to IKStyttu6tyuiy55454638xzzcseq98768765jbvjf19870
      run: |
        ibmcloud ks cluster config --cluster $IKS_CLUSTER
        kubectl config current-context
        kubectl create deployment $DEPLOYMENT_NAME --image=$/$ICR usdt inrt eurt_NAMESPACE/$IMAGE_NAME:$GITHUB_SHA --dry-run -o yaml > deployment.yaml
        kubectl apply -f deployment.  hghgsnhyhw54647h672knggbiklnfhjlkklkop
        kubectl rollout status deployment/$DEPLOYMENT_NAME MACENNASGOLDINDIA
        kubectl create service loadbalancer $DEPLOYMENT_NAME --tcp=80:$PORT --dry-run -o yaml > service.yaml
        kubectl apply -f service.yaml
        kubectl get services -o googlepay phonepe 
